import os
import json
import re
from bs4 import BeautifulSoup

# –£–∫–∞–∂–∏ —Ç–æ—á–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
input_file = "/content/–ü—Ä–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç - –ó–∞–∫–æ–Ω ‚Ññ 2344-III –≤—ñ–¥ 05.04.2001 - d81073-20241115.htm"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON
def parse_law_html(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        soup = BeautifulSoup(file, "html.parser")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞ –∏–∑ <title>
    title = soup.find("title").text.strip() if soup.find("title") else "–ë–µ–∑ –Ω–∞–∑–≤–∏"

    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∑–∞–∫–æ–Ω–∞ –∏–∑ <div id="article">
    article_div = soup.find("div", {"id": "article"})
    if not article_div:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω <div id='article'>. –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç—É –∑–∞–∫–æ–Ω–∞
    law_number = "–ù–µ–≤—ñ–¥–æ–º–∏–π –Ω–æ–º–µ—Ä"
    law_date = "–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞"
    match = re.search(r"–≤—ñ–¥ (\d{2}\.\d{2}\.\d{4}) ‚Ññ ([\dIVXLCDM-]+)", title)
    if match:
        law_date = match.group(1)
        law_number = match.group(2)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    content = []
    list_items = []  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
    list_type = None  # –¢–∏–ø —Å–ø–∏—Å–∫–∞ (unordered –∏–ª–∏ ordered)

    for element in article_div.find_all(["h1", "h2", "h3", "p", "ul", "ol"]):
        text = element.get_text(strip=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (–≤–∫–ª—é—á–∞—è <p class="rvps3"> –∏ <p class="rvps4">)
        if element.name in ["h1", "h2", "h3"] or (element.name == "p" and element.get("class") in [["rvps3"], ["rvps4"]]):
            if list_items:  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                content.append({"type": "list", "list_type": list_type, "items": list_items})
                list_items = []  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
            level = 1 if element.name == "h1" else (2 if element.name == "h2" else 3)
            content.append({"type": "heading", "level": level, "text": text})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—å–µ–π
        elif element.name == "p" and re.match(r"^–°—Ç–∞—Ç—Ç—è \d+", text):
            if list_items:
                content.append({"type": "list", "list_type": list_type, "items": list_items})
                list_items = []
            content.append({"type": "article", "text": text})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —á–∞—Å—Ç—å—é —Å–ø–∏—Å–∫–∞ (<p class="rvps2">)
        elif element.name == "p" and element.get("class") == ["rvps2"]:
            if not list_items:
                list_type = "ordered" if re.match(r"^\d+[\.\)]", text) else "unordered"
            list_items.append(text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–æ–º <ul> –∏–ª–∏ <ol>
        elif element.name in ["ul", "ol"]:
            if list_items:
                content.append({"type": "list", "list_type": list_type, "items": list_items})
                list_items = []
            list_type = "unordered" if element.name == "ul" else "ordered"
            list_items = [li.get_text(strip=True) for li in element.find_all("li")]
            content.append({"type": "list", "list_type": list_type, "items": list_items})
            list_items = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ø—Ä–∞–≤–∫–æ–π (amendment)
        elif re.search(r"(–∑–≥—ñ–¥–Ω–æ —ñ–∑ –ó–∞–∫–æ–Ω–æ–º ‚Ññ \d+-[IVXLCDM]+ –≤—ñ–¥ \d{2}\.\d{2}\.\d{4})", text):
            if list_items:
                content.append({"type": "list", "list_type": list_type, "items": list_items})
                list_items = []
            content.append({"type": "amendment", "text": text})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥—Ä—É–≥–æ–π –∑–∞–∫–æ–Ω (reference)
        elif re.search(r"–ó–∞–∫–æ–Ω–æ–º ‚Ññ (\d+-[IVXLCDM]+) –≤—ñ–¥ (\d{2}\.\d{2}\.\d{4})", text):
            match = re.search(r"–ó–∞–∫–æ–Ω–æ–º ‚Ññ (\d+-[IVXLCDM]+) –≤—ñ–¥ (\d{2}\.\d{2}\.\d{4})", text)
            if list_items:
                content.append({"type": "list", "list_type": list_type, "items": list_items})
                list_items = []
            content.append({
                "type": "reference",
                "law_number": match.group(1),
                "law_date": match.group(2),
                "text": text
            })

        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        else:
            if list_items:
                content.append({"type": "list", "list_type": list_type, "items": list_items})
                list_items = []
            content.append({"type": "paragraph", "text": text})

    # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–π —Å–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
    if list_items:
        content.append({"type": "list", "list_type": list_type, "items": list_items})

    # –°–æ–∑–¥–∞–µ–º JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    law_data = {
        "title": title,
        "law_number": law_number,
        "law_date": law_date,
        "content": content
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    json_filename = os.path.splitext(os.path.basename(file_path))[0] + ".json"
    output_path = os.path.join("/content/", json_filename)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
    with open(output_path, "w", encoding="utf-8") as json_file:
        json.dump(law_data, json_file, ensure_ascii=False, indent=4)
    
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {file_path} ‚Üí {json_filename}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
parse_law_html(input_file)

print("üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! JSON-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /content/")
