import os
import json
import re
from bs4 import BeautifulSoup

# –£–∫–∞–∂–∏ —Ç–æ—á–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
input_file = "/content/–ü—Ä–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç - –ó–∞–∫–æ–Ω ‚Ññ 2344-III –≤—ñ–¥ 05.04.2001 - d81073-20241115.htm"

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –≤ JSON
def parse_law_html(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        soup = BeautifulSoup(file, "lxml")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞ –∏–∑ <title>
    title = soup.find("title").text.strip() if soup.find("title") else "–ë–µ–∑ –Ω–∞–∑–≤–∏"

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç—É –∑–∞–∫–æ–Ω–∞
    law_number = "–ù–µ–≤—ñ–¥–æ–º–∏–π –Ω–æ–º–µ—Ä"
    law_date = "–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞"
    title_match = re.search(r"‚Ññ (\d+-[IVX]+) –≤—ñ–¥ (\d{2}\.\d{2}\.\d{4})", title)
    if title_match:
        law_number, law_date = title_match.groups()

    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∑–∞–∫–æ–Ω–∞
    article_div = soup.find("div", {"id": "article"})
    if not article_div:
        print("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∑–∞–∫–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    content = []
    current_list = None
    list_type = None

    for element in article_div.find_all(["p", "b", "a"]):
        text = element.get_text(strip=True)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if not text:
            continue

        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if element.name == "b":
            content.append({"type": "heading", "level": 2, "text": text})
            continue

        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
        if element.name == "p" and "rvps2" in element.get("class", []):
            match_numbered = re.match(r"^(\d+(\.\d+)*)\)", text)  # 1), 1.1), 1.2)
            match_lettered = re.match(r"^([–∞-—è])\)", text)  # –∞), –±)

            if match_numbered:
                if not current_list or list_type != "ordered":
                    if current_list:
                        content.append({"type": "list", "list_type": list_type, "items": current_list})
                    current_list = []
                    list_type = "ordered"
                current_list.append(text)

            elif match_lettered:
                if not current_list or list_type != "ordered":
                    if current_list:
                        content.append({"type": "list", "list_type": list_type, "items": current_list})
                    current_list = []
                    list_type = "ordered"
                current_list.append(text)

            else:
                if not current_list or list_type != "unordered":
                    if current_list:
                        content.append({"type": "list", "list_type": list_type, "items": current_list})
                    current_list = []
                    list_type = "unordered"
                current_list.append(text)

            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–æ–Ω–µ
        if "–∑–≥—ñ–¥–Ω–æ —ñ–∑ –ó–∞–∫–æ–Ω–æ–º" in text:
            content.append({"type": "amendment", "text": text})
            continue

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        content.append({"type": "paragraph", "text": text})

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏—Å–∫–∞
    if current_list:
        content.append({"type": "list", "list_type": list_type, "items": current_list})

    # –°–æ–∑–¥–∞–µ–º JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    law_data = {
        "title": title,
        "law_number": law_number,
        "law_date": law_date,
        "content": content
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    json_filename = os.path.splitext(os.path.basename(file_path))[0] + ".json"
    output_path = os.path.join("/content/", json_filename)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
    with open(output_path, "w", encoding="utf-8") as json_file:
        json.dump(law_data, json_file, ensure_ascii=False, indent=4)

    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {file_path} ‚Üí {json_filename}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
parse_law_html(input_file)

print("üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! JSON-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /content/")
